document.addEventListener("DOMContentLoaded",async()=>{const e=document.getElementById("supportTickets"),t=document.getElementById("adminBadgeEmail"),n=document.getElementById("ticketSearch");let a=[];e.innerHTML='<p class="text-gray-500 text-center">Loading tickets...</p>';try{const d=await fetch("/api/support",{credentials:"include"});if(!d.ok)throw new Error("Failed to fetch tickets");const o=await d.json();if(!Array.isArray(o))return void(e.innerHTML='<p class="text-red-600 text-center">‚ùå Invalid response format.</p>');if(0===o.length)return void(e.innerHTML='<p class="text-center text-gray-500">No support tickets found.</p>');a=o,o[0].business_email&&t&&(t.textContent=o[0].business_email),l(a),n?.addEventListener("input",()=>{const e=n.value.toLowerCase();l(a.filter(t=>t.subject.toLowerCase().includes(e)||t.message.toLowerCase().includes(e)||t.user_email.toLowerCase().includes(e)))})}catch(t){console.error("‚ùå Support fetch error:",t),e.innerHTML='<p class="text-red-600 text-center">‚ùå Could not load support tickets.</p>'}function l(t){t.length?(e.innerHTML=t.map(e=>`\n      <div class="ticket bg-blue-50 border border-blue-100 p-6 rounded-2xl shadow-sm hover:shadow-md" data-id="${e.id}">\n        <div class="flex justify-between items-start mb-4">\n          <div>\n            <h2 class="text-lg font-semibold text-blue-800">${e.subject}</h2>\n            <p class="text-xs text-gray-500 mt-1">${new Date(e.created_at).toLocaleString()}</p>\n          </div>\n          <span class="inline-block bg-blue-100 text-blue-800 text-xs font-medium px-2 py-1 rounded-full">\n            ${e.status||"Open"}\n          </span>\n        </div>\n\n        <p class="text-sm text-gray-700 mb-4 editable" data-id="${e.id}" data-field="message">${e.message}</p>\n\n        <div class="text-xs text-gray-600 mb-4">\n          <strong>From:</strong> ${e.user_name||"Unknown"} (${e.user_email||"N/A"})\n        </div>\n\n        <div class="flex items-center justify-end space-x-3 text-sm">\n          <button class="replyBtn px-4 py-1 rounded-md bg-green-100 text-green-700 hover:bg-green-200"\n                  data-id="${e.id}" \n                  data-subject="${encodeURIComponent(e.subject)}"\n                  data-email="${encodeURIComponent(e.user_email)}">\n            Reply\n          </button>\n\n          <button class="resolveBtn px-4 py-1 rounded-md bg-yellow-100 text-yellow-700 hover:bg-yellow-200"\n                  data-id="${e.id}">\n            Mark Resolved\n          </button>\n\n          <button class="deleteBtn px-4 py-1 rounded-md bg-red-100 text-red-700 hover:bg-red-200"\n                  data-id="${e.id}">\n            Delete\n          </button>\n        </div>\n      </div>\n    `).join(""),document.querySelectorAll(".replyBtn").forEach(e=>e.addEventListener("click",()=>{const{id:t,subject:n,email:a}=e.dataset;openReplyModal(t,decodeURIComponent(n),decodeURIComponent(a))})),document.querySelectorAll(".resolveBtn").forEach(e=>e.addEventListener("click",()=>handleMarkResolved(e.dataset.id))),document.querySelectorAll(".deleteBtn").forEach(e=>e.addEventListener("click",()=>handleDelete(e.dataset.id))),d()):e.innerHTML='<p class="text-center text-gray-400">No matching tickets.</p>'}function d(){document.querySelectorAll(".editable").forEach(e=>{e.addEventListener("click",()=>{const{field:t,id:n}=e.dataset,a=e.textContent,l=document.createElement("textarea");l.value=a,l.className="w-full text-sm text-gray-800 p-2 rounded border mt-2",e.replaceWith(l),l.focus(),l.addEventListener("blur",async()=>{const o=l.value,r=document.createElement("p");r.className=e.className,r.dataset.id=n,r.dataset.field=t,r.textContent=o,l.replaceWith(r),d(),o!==a&&console.log(`üìù Updating ${t} for ticket ${n}...`)})})})}});let currentReplyTicketId=null;function openReplyModal(e,t,n){currentReplyTicketId=e,document.getElementById("replyModalSubject").textContent=`Subject: ${t} | To: ${n}`,document.getElementById("replyMessage").value="",document.getElementById("replyModal").classList.remove("hidden")}function closeReplyModal(){document.getElementById("replyModal").classList.add("hidden")}async function submitReply(){const e=document.getElementById("replyMessage").value.trim();if(!e)return alert("Reply message cannot be empty.");try{if(!(await fetch(`/api/support/${currentReplyTicketId}/reply`,{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({message:e})})).ok)throw new Error;alert("‚úÖ Reply sent"),closeReplyModal(),location.reload()}catch{alert("‚ùå Failed to send reply")}}async function handleMarkResolved(e){if(confirm("Mark this ticket as resolved?"))try{if(!(await fetch(`/api/support/${e}/resolve`,{method:"PATCH",credentials:"include"})).ok)throw new Error;alert("‚úÖ Ticket marked as resolved"),location.reload()}catch{alert("‚ùå Failed to resolve ticket")}}async function handleDelete(e){if(confirm("Delete this ticket permanently?"))try{if(!(await fetch(`/api/support/${e}`,{method:"DELETE",credentials:"include"})).ok)throw new Error;alert("üóëÔ∏è Ticket deleted"),location.reload()}catch{alert("‚ùå Failed to delete ticket")}}document.getElementById("closeReplyBtn")?.addEventListener("click",closeReplyModal),document.getElementById("submitReplyBtn")?.addEventListener("click",submitReply);