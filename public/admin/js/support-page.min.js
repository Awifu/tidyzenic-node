document.addEventListener("DOMContentLoaded",async()=>{const e=document.getElementById("supportTickets"),t=document.getElementById("adminBadgeEmail"),n=document.getElementById("ticketSearch");let a=[];function d(t){if(!t.length)return void(e.innerHTML='<p class="text-center text-gray-400">No matching tickets.</p>');e.innerHTML=t.map((e=>`<div class="ticket bg-blue-50 border border-blue-100 p-6 rounded-2xl shadow-sm hover:shadow-md" data-id="${e.id}"><div class="flex justify-between items-start mb-4"><div><h2 class="text-lg font-semibold text-blue-800">${e.subject}</h2><p class="text-xs text-gray-500 mt-1">${new Date(e.created_at).toLocaleString()}</p></div><span class="inline-block bg-blue-100 text-blue-800 text-xs font-medium px-2 py-1 rounded-full">${e.status||"Open"}</span></div><p class="text-sm text-gray-700 mb-4 editable" data-id="${e.id}" data-field="message">${e.message}</p><div class="text-xs text-gray-600 mb-4"><strong>From:</strong> ${e.user_name||"Unknown"} (${e.user_email||"N/A"})</div><div class="flex items-center justify-end space-x-3 text-sm"><button class="replyBtn px-4 py-1 rounded-md bg-green-100 text-green-700 hover:bg-green-200" data-id="${e.id}" data-subject="${encodeURIComponent(e.subject)}" data-email="${encodeURIComponent(e.user_email)}">Reply</button><button class="resolveBtn px-4 py-1 rounded-md bg-yellow-100 text-yellow-700 hover:bg-yellow-200" data-id="${e.id}">Mark Resolved</button><button class="deleteBtn px-4 py-1 rounded-md bg-red-100 text-red-700 hover:bg-red-200" data-id="${e.id}">Delete</button></div></div>`)).join(""),o(),l()}function o(){document.querySelectorAll(".replyBtn").forEach((e=>e.addEventListener("click",(()=>{const{subject:t,email:n,id:a}=e.dataset;r(a,decodeURIComponent(t),decodeURIComponent(n))})))),document.querySelectorAll(".resolveBtn").forEach((e=>e.addEventListener("click",(()=>s(e.dataset.id))))),document.querySelectorAll(".deleteBtn").forEach((e=>e.addEventListener("click",(()=>i(e.dataset.id)))))}
function l(){document.querySelectorAll(".editable").forEach((e=>{e.addEventListener("click",(()=>{const{field:t,id:n}=e.dataset,a=e.textContent,o=document.createElement("textarea");o.value=a,o.className="w-full text-sm text-gray-800 p-2 rounded border mt-2",e.replaceWith(o),o.focus(),o.addEventListener("blur",(()=>{const l=o.value,d=document.createElement("p");d.className=e.className,d.dataset.id=n,d.dataset.field=t,d.textContent=l,o.replaceWith(d),l!==a&&console.log(`üìù Updating ${t} for ticket ${n}...`),l()})}) )}))}e.innerHTML='<p class="text-gray-500 text-center">Loading tickets...</p>';try{const l=await fetch("/api/support",{credentials:"include"});if(!l.ok)throw new Error("Failed to fetch tickets");const s=await l.json();if(!Array.isArray(s))return void(e.innerHTML='<p class="text-red-600 text-center">‚ùå Invalid response format.</p>');if(0===s.length)return void(e.innerHTML='<p class="text-center text-gray-500">No support tickets found.</p>');a=s,s[0].business_email&&t&&(t.textContent=s[0].business_email),d(a),n?.addEventListener("input",(()=>{const e=n.value.toLowerCase(),t=a.filter((t=>t.subject.toLowerCase().includes(e)||t.message.toLowerCase().includes(e)||t.user_email.toLowerCase().includes(e)));d(t)}))}catch(t){console.error("‚ùå Support fetch error:",t),e.innerHTML='<p class="text-red-600 text-center">‚ùå Could not load support tickets.</p>'}});
let currentReplyTicketId=null;function r(e,t,n){currentReplyTicketId=e,document.getElementById("replyModalSubject").textContent=`Subject: ${t} | To: ${n}`,document.getElementById("replyMessage").value="",document.getElementById("replyModal").classList.remove("hidden")}function c(){document.getElementById("replyModal").classList.add("hidden")}async function m(){const e=document.getElementById("replyMessage").value.trim();if(!e)return alert("Reply message cannot be empty.");try{const t=await fetch(`/api/support/${currentReplyTicketId}/reply`,{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({message:e})});if(!t.ok)throw new Error;alert("‚úÖ Reply sent"),c(),location.reload()}catch{alert("‚ùå Failed to send reply")}}async function s(e){if(confirm("Mark this ticket as resolved?"))try{const t=await fetch(`/api/support/${e}/resolve`,{method:"PATCH",credentials:"include"});if(!t.ok)throw new Error;alert("‚úÖ Ticket marked as resolved"),location.reload()}catch{alert("‚ùå Failed to resolve ticket")}}async function i(e){if(confirm("Delete this ticket permanently?"))try{const t=await fetch(`/api/support/${e}`,{method:"DELETE",credentials:"include"});if(!t.ok)throw new Error;alert("üóëÔ∏è Ticket deleted"),location.reload()}catch{alert("‚ùå Failed to delete ticket")}}document.getElementById("closeReplyBtn")?.addEventListener("click",c),document.getElementById("submitReplyBtn")?.addEventListener("click",m);
