document.addEventListener("DOMContentLoaded",async()=>{const e=document.getElementById("supportTickets"),t=document.getElementById("adminBadgeEmail"),n=document.getElementById("ticketSearch"),s=document.getElementById("closeReplyBtn"),a=document.getElementById("submitReplyBtn"),d=document.getElementById("replyModal"),r=document.getElementById("replyModalSubject"),o=document.getElementById("replyMessage"),i=document.getElementById("replyError"),l=document.getElementById("toast");let c=[],u=null;e.innerHTML='<p class="text-gray-500 text-center">Loading tickets...</p>';try{const s=await fetch("/api/support",{credentials:"include"});if(!s.ok)throw new Error("Failed to fetch tickets");const a=await s.json();if(!Array.isArray(a))return void(e.innerHTML='<p class="text-red-600 text-center">‚ùå Invalid response format.</p>');if(0===a.length)return void(e.innerHTML='<p class="text-center text-gray-500">No support tickets found.</p>');c=a,a[0].business_email&&t&&(t.textContent=a[0].business_email),p(c),n?.addEventListener("input",()=>{const e=n.value.toLowerCase();p(c.filter(t=>t.subject.toLowerCase().includes(e)||t.message.toLowerCase().includes(e)||t.user_email.toLowerCase().includes(e)))})}catch(t){console.error("‚ùå Support fetch error:",t),e.innerHTML='<p class="text-red-600 text-center">‚ùå Could not load support tickets.</p>'}function p(t){t.length?(e.innerHTML=t.map(e=>`\n    <div class="ticket bg-white/80 border border-gray-200 p-6 rounded-2xl shadow-md hover:shadow-lg transition-all mb-6 backdrop-blur-sm" data-id="${e.id}">\n      \n      <div class="flex justify-between items-start mb-4">\n        <div>\n          <h2 class="text-lg font-semibold text-blue-800 flex items-center gap-2">\n            <span class="text-xl">üì¨</span> ${e.subject}\n          </h2>\n          <p class="text-xs text-gray-500 mt-1">${new Date(e.created_at).toLocaleString()}</p>\n        </div>\n        <span class="px-3 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-700 border border-blue-200">\n          ${e.status||"Open"}\n        </span>\n      </div>\n\n      <p class="text-sm text-gray-800 mb-4 editable leading-relaxed bg-gray-50 p-3 rounded-lg hover:bg-gray-100 cursor-pointer" \n         data-id="${e.id}" data-field="message">\n        ${e.message}\n      </p>\n\n      <div class="text-xs text-gray-600 mb-4">\n        <strong>üë§ User:</strong> ${e.user_name||"Unknown"} &lt;${e.user_email||"N/A"}&gt;\n      </div>\n\n      <div class="flex items-center justify-end flex-wrap gap-3 text-sm">\n        <button class="px-4 py-1.5 rounded-full bg-blue-100 text-blue-800 hover:bg-blue-200 transition shadow-sm replyBtn"\n                data-id="${e.id}" \n                data-subject='${encodeURIComponent(e.subject)}'\n                data-email='${encodeURIComponent(e.user_email)}'>\n          ‚úâÔ∏è Reply\n        </button>\n\n        <button class="px-4 py-1.5 rounded-full bg-green-100 text-green-800 hover:bg-green-200 transition shadow-sm resolveBtn"\n                data-id="${e.id}">\n          ‚úÖ Mark Resolved\n        </button>\n\n        <button class="px-4 py-1.5 rounded-full bg-red-100 text-red-700 hover:bg-red-200 transition shadow-sm deleteBtn"\n                data-id="${e.id}">\n          üóë Delete\n        </button>\n      </div>\n    </div>\n  `).join(""),document.querySelectorAll(".replyBtn").forEach(e=>e.addEventListener("click",()=>{const{id:t,subject:n,email:s}=e.dataset;!function(e,t,n){u=e,r.textContent=`Subject: ${t} | To: ${n}`,o.value="",d.classList.remove("hidden"),i.classList.add("hidden"),o.classList.remove("border-red-500","ring-1","ring-red-300")}(t,decodeURIComponent(n),decodeURIComponent(s))})),document.querySelectorAll(".resolveBtn").forEach(e=>e.addEventListener("click",()=>async function(e){if(confirm("Mark this ticket as resolved?"))try{if(!(await fetch(`/api/support/${e}/resolve`,{method:"PATCH",credentials:"include"})).ok)throw new Error;y("‚úÖ Ticket marked as resolved"),setTimeout(()=>location.reload(),1e3)}catch{y("‚ùå Failed to mark as resolved")}}(e.dataset.id))),document.querySelectorAll(".deleteBtn").forEach(e=>e.addEventListener("click",()=>async function(e){if(confirm("Delete this ticket permanently?"))try{if(!(await fetch(`/api/support/${e}`,{method:"DELETE",credentials:"include"})).ok)throw new Error;y("üóëÔ∏è Ticket deleted"),setTimeout(()=>location.reload(),1e3)}catch{y("‚ùå Failed to delete ticket")}}(e.dataset.id))),m()):e.innerHTML='<p class="text-center text-gray-400">No matching tickets.</p>'}function m(){document.querySelectorAll(".editable").forEach(e=>{e.addEventListener("click",()=>{if(e.classList.contains("editing"))return;e.classList.add("editing");const{field:t,id:n}=e.dataset,s=e.textContent.trim(),a=document.createElement("div");a.className="space-y-2";const d=document.createElement("textarea");d.value=s,d.className="w-full text-sm text-gray-800 p-3 rounded-lg border focus:ring-2 focus:ring-blue-300";const r=document.createElement("button");r.textContent="üíæ Update",r.className="bg-green-600 text-white text-sm px-4 py-1 rounded hover:bg-green-700",a.appendChild(d),a.appendChild(r),e.replaceWith(a),d.focus(),r.addEventListener("click",async()=>{const r=d.value.trim();if(!r||r===s)return a.replaceWith(e),void m();try{if(!(await fetch(`/api/support/${n}/edit`,{method:"PATCH",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({field:t,value:r})})).ok)throw new Error;const s=document.createElement("p");s.className=e.className,s.dataset.id=n,s.dataset.field=t,s.textContent=r,a.replaceWith(s),m(),y("‚úÖ Message updated")}catch{y("‚ùå Failed to update message"),a.replaceWith(e),m()}})})})}function g(){d.classList.add("hidden")}function y(e="Done"){l&&(l.textContent=e,l.classList.remove("opacity-0"),l.classList.add("opacity-100"),setTimeout(()=>{l.classList.remove("opacity-100"),l.classList.add("opacity-0")},3e3))}s?.addEventListener("click",g),a?.addEventListener("click",async function(){const e=o.value.trim();if(!e)return i.textContent="Reply message cannot be empty.",i.classList.remove("hidden"),void o.classList.add("border-red-500","ring-1","ring-red-300");i.classList.add("hidden"),o.classList.remove("border-red-500","ring-1","ring-red-300");try{if(!(await fetch(`/api/support/${u}/reply`,{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({message:e})})).ok)throw new Error;y("‚úÖ Reply sent"),g(),setTimeout(()=>location.reload(),1500)}catch{y("‚ùå Failed to send reply")}})});